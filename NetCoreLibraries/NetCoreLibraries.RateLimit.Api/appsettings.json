{


  //********************************  IpRateLimit - Start ********************************


  //********  IpRateLimitPolicies - start ***********

  // IpRateLimitPolicies içinde tanımlanan tüm kurallar, diğer tanımlamış oldukların kuralları ezer. Fakat tanımlamış oluğun kurallar aynı ise aksi durumda limit daha dar kapsamlı olan öncelikli çalışır.
  // Ezme olayı olmaması için yorum satırı yaptık.

  //"IpRateLimitPolicies": {
  //  "IpRules": [
  //    {
  //      "Ip": "::1",
  //      "Rules": [
  //        {
  //          "Endpoint": "*",
  //          "Period": "30s",
  //          "Limit": 30
  //        }
  //      ]
  //    }
  //  ]

  //},

  //****** IpRateLimitPolicies - end ***********


  "IpRateLimiting": {
    "QuotaExceededResponse": {
      "Content": "{{ \"mesaj\":\"İstek limiti aşıldı. \", \"Detay\": \"İzin verilen istek sayısı {1}'de {0} istektir. {2} saniye sonra tekrar deneyiniz  \"  }}", // json olarak geri döneceği için ona göre yazmak gerekir
      "ContentType": "application/json"
    },
    "EnableEndpointRateLimiting": true,
    // "RealIpHeader": "x-ip",                          // Birden fazla uygulama çalışıyorsa veya Load Balancer varsa "RealIpHeader" tanımlanması gerekir.  RateLimit kütüphanesi bu key den okur istekleri
    "StackBlockedRequests": false,
    "HttpStatusCode": 429,
    "IpWhitelist": [ "127.0.0.1" ], // Bu IP adresi dışındakilere genel kurallar, kısıtlamalar getirdik
    "EndpointWhiteList": [ "put:/api/product" ], // bu adresi kısıtlamalardan muaf tut demektir.
    "GeneralRules": [
      {
        "Endpoint": "*:/api/product",
        "Period": "20s", // Period : {1}, Kaç saniye kaldığını veren parametre {2}
        "Limit": 3 // Limit : {0}
      },
      {
        "Endpoint": "*:/api/product/*", // :/api/product/*  parametre alan endpointler için geçerli kuraldır.
        "Period": "30s",
        "Limit": 5
      },
      {
        "Endpoint": "*:/api/category",
        "Period": "30s",
        "Limit": 5
      },
      {
        "Endpoint": "*:/api/category",
        "Period": "1d",
        "Limit": 500
      }
    ]
  },

  //********************************  IpRateLimit - End ********************************

  //********************************  ClientRateLimit - Start ********************************

  "ClientRateLimiting": {
    "QuotaExceededResponse": {
      "Content": "{{ \"mesaj\":\"İstek limiti aşıldı. \", \"Detay\": \"İzin verilen istek sayısı {1}'de {0} istektir. {2} saniye sonra tekra deneyiniz  \"  }}",
      "ContentType": "application/json"
    },

    "EnableEndpointRateLimiting": true,

    "StackBlockedRequests": false,
    "HttpStatusCode": 429,
    "ClientIdHeader": "X-ClientId", // Header da bu client varsa muaf
    "ClientWhitelist": [ "client-1" ], // Header da bu client varsa muaf
    "EndpointWhiteList": [ "put:/api/product" ],

    "GeneralRules": [
      {
        "Endpoint": "*:/api/product",
        "Period": "20s",
        "Limit": 2
      },

      {
        "Endpoint": "*:/api/product/*",
        "Period": "30s",
        "Limit": 5
      },

      {
        "Endpoint": "*:/api/categories",
        "Period": "30s",
        "Limit": 5
      },
      {
        "Endpoint": "*:/api/categories",
        "Period": "1d",
        "Limit": 500
      }
    ]
  },

  //********************************  ClientRateLimit - End ********************************

  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*"
}
